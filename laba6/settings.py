"""
Django settings for laba6 project.

Generated by 'django-admin startproject' using Django 3.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-wz#19e^@&jnw=*79ei#d#pr+d6hp_f9l^1z-qp2du!_!)k#1$5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'drf_yasg',
    'services',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

ROOT_URLCONF = 'laba6.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'laba6.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Для обеспечения безопасного доступа к API используется JWT-аутентификация.

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}



SIMPLE_JWT = {
    # токен доступа действителен в течение 5 минут.
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    # токен обновления действителен в течение 1 дня.
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    # Определяет, нужно ли обновлять токен обновления при каждом использовании. 
    'ROTATE_REFRESH_TOKENS': False,
    # Определяет, нужно ли добавлять старые токены обновления в черный список после их обновления.
    'BLACKLIST_AFTER_ROTATION': True,
    # Устанавливает алгоритм, используемый для подписи токенов. 
    'ALGORITHM': 'HS256',
    # Устанавливает ключ, используемый для подписи токенов.
    'SIGNING_KEY': 'your_secret_key',
    # Устанавливает ключ, используемый для проверки подписи токенов. 
    # None, что означает, что ключ подписи и ключ проверки одинаковы.
    'VERIFYING_KEY': None,
    # Устанавливает типы заголовков авторизации, которые будут использоваться.
    'AUTH_HEADER_TYPES': ('Bearer',),
    # Устанавливает поле в модели пользователя, которое будет использоваться для идентификации пользователя. 
    'USER_ID_FIELD': 'id',
    # Устанавливает имя утверждения (claim) в токене, которое будет использоваться для идентификации пользователя. 
    'USER_ID_CLAIM': 'user_id',
    # Устанавливает классы токенов, которые будут использоваться для авторизации. 
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    # Устанавливает имя утверждения (claim) в токене, которое будет использоваться для указания типа токена.
    'TOKEN_TYPE_CLAIM': 'token_type',
}
#  Устанавливает список разрешенных источников (origins), которые могут отправлять запросы к API.
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]
#  Устанавливает, разрешены ли запросы с учетными данными (например, cookies). 
CORS_ALLOW_CREDENTIALS = True